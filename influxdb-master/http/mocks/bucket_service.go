// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2 (interfaces: BucketService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"github.com/influxdata/influxdb/v2/kit/platform"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb "github.com/influxdata/influxdb/v2"
)

// MockBucketService is a mock of BucketService interface
type MockBucketService struct {
	ctrl     *gomock.Controller
	recorder *MockBucketServiceMockRecorder
}

// MockBucketServiceMockRecorder is the mock recorder for MockBucketService
type MockBucketServiceMockRecorder struct {
	mock *MockBucketService
}

// NewMockBucketService creates a new mock instance
func NewMockBucketService(ctrl *gomock.Controller) *MockBucketService {
	mock := &MockBucketService{ctrl: ctrl}
	mock.recorder = &MockBucketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucketService) EXPECT() *MockBucketServiceMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method
func (m *MockBucketService) CreateBucket(arg0 context.Context, arg1 *influxdb.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket
func (mr *MockBucketServiceMockRecorder) CreateBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockBucketService)(nil).CreateBucket), arg0, arg1)
}

// DeleteBucket mocks base method
func (m *MockBucketService) DeleteBucket(arg0 context.Context, arg1 platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket
func (mr *MockBucketServiceMockRecorder) DeleteBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockBucketService)(nil).DeleteBucket), arg0, arg1)
}

// FindBucket mocks base method
func (m *MockBucketService) FindBucket(arg0 context.Context, arg1 influxdb.BucketFilter) (*influxdb.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBucket", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBucket indicates an expected call of FindBucket
func (mr *MockBucketServiceMockRecorder) FindBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBucket", reflect.TypeOf((*MockBucketService)(nil).FindBucket), arg0, arg1)
}

// FindBucketByID mocks base method
func (m *MockBucketService) FindBucketByID(arg0 context.Context, arg1 platform.ID) (*influxdb.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBucketByID", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBucketByID indicates an expected call of FindBucketByID
func (mr *MockBucketServiceMockRecorder) FindBucketByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBucketByID", reflect.TypeOf((*MockBucketService)(nil).FindBucketByID), arg0, arg1)
}

// FindBucketByName mocks base method
func (m *MockBucketService) FindBucketByName(arg0 context.Context, arg1 platform.ID, arg2 string) (*influxdb.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBucketByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*influxdb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBucketByName indicates an expected call of FindBucketByName
func (mr *MockBucketServiceMockRecorder) FindBucketByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBucketByName", reflect.TypeOf((*MockBucketService)(nil).FindBucketByName), arg0, arg1, arg2)
}

// FindBuckets mocks base method
func (m *MockBucketService) FindBuckets(arg0 context.Context, arg1 influxdb.BucketFilter, arg2 ...influxdb.FindOptions) ([]*influxdb.Bucket, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindBuckets", varargs...)
	ret0, _ := ret[0].([]*influxdb.Bucket)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindBuckets indicates an expected call of FindBuckets
func (mr *MockBucketServiceMockRecorder) FindBuckets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuckets", reflect.TypeOf((*MockBucketService)(nil).FindBuckets), varargs...)
}

// UpdateBucket mocks base method
func (m *MockBucketService) UpdateBucket(arg0 context.Context, arg1 platform.ID, arg2 influxdb.BucketUpdate) (*influxdb.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBucket", arg0, arg1, arg2)
	ret0, _ := ret[0].(*influxdb.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucket indicates an expected call of UpdateBucket
func (mr *MockBucketServiceMockRecorder) UpdateBucket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucket", reflect.TypeOf((*MockBucketService)(nil).UpdateBucket), arg0, arg1, arg2)
}
